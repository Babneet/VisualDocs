version: '3'
services:
    
    redis:
        image: redis:3.2
        networks:
            - frontend
        ports:
            - "6379"
        deploy:
            replicas: 1
            update_config:
                parallelism: 2
                delay: 10s
            restart_policy:
                condition: on-failure
    db:
        image: postgres:9.4
        networks:
            - backend 
        environments:
            - POSTGRES_HOST_AUTH_METHOD=trust
            - POSTGRES_PASSWORD=mypass
        volumes:
            - db-data:/var/lib/postgresql/data
        deploy:
            replicas: 1
            placement:
                constraints: [node.role == manager]
    vote:
        image: bretfisher/examplevotingapp_vote
        ports:
          - 80:80
        networks:
          - frontend 
        depends_on:
            -redis
        deploy:
            replicas: 2
            update_config:
                parallelism: 2
            restart_policy:
                condition: on-failure
    worker:
        image: bretfisher/examplevotingapp_worker:java
        networks:
            - backend
            - frontend
        depends_on: 
            - db
            - redis
        deploy:
         replicas: 2
            restart_policy:
                condition: on-failure
            placement:
                constraints: [node.role == manage]
    result:
        image: bretfisher/examplevotingapp_result
        ports:
            - 5001:80
        netwoks:
            - backend 
        depends_on:
            - db
        deploy:
            replicas: 1
            update_config:
                parallelism:
                delay: 10s
            restart_policy:
                condition: on-failure
    visualizer:
        image: dockersamples/visualizer
        ports:
            - "8080:8080"
        stop_grace_period: 1m30s
        volumes:
            - "/var/run/docker.sock:/var/run/docker.sock"
        deploy:
            placement:
                constraints: [node.role == manager]

netwoks:
    frontend:
    backend:

volumes:
    db-data: